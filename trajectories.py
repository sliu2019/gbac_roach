import numpy as np
import IPython

def make_trajectory(shape, curr_state, x_index, y_index):

    curr_x = np.copy(curr_state[x_index])
    curr_y = np.copy(curr_state[y_index])
    my_list = []

    if(shape=="straight"):
        i=0
        num_pts = 40
        while(i < num_pts):
            my_list.append(np.array([curr_x+i, curr_y]))
            i+=1

    if(shape=="left"):
        my_list.append(np.array([curr_x, curr_y]))
        my_list.append(np.array([curr_x+1, curr_y]))
        my_list.append(np.array([curr_x+1.8, curr_y+0.2]))
        my_list.append(np.array([curr_x+2, curr_y+1]))
        my_list.append(np.array([curr_x+2, curr_y+2]))
        my_list.append(np.array([curr_x+2, curr_y+3]))
        my_list.append(np.array([curr_x+2, curr_y+4]))
        my_list.append(np.array([curr_x+2, curr_y+5]))
        my_list.append(np.array([curr_x+2, curr_y+6]))
        my_list.append(np.array([curr_x+2, curr_y+7]))
        my_list.append(np.array([curr_x+2, curr_y+8]))
        my_list.append(np.array([curr_x+2, curr_y+9]))

        # left turn with longer vertical branch
        # my_list.append(np.array([curr_x, curr_y]))
        # my_list.append(np.array([curr_x+1, curr_y]))
        # my_list.append(np.array([curr_x+2, curr_y]))
        # my_list.append(np.array([curr_x+2.8, curr_y+0.2]))
        # my_list.append(np.array([curr_x+3, curr_y+1]))
        # my_list.append(np.array([curr_x+3, curr_y+2]))
        # my_list.append(np.array([curr_x+3, curr_y+3]))
        # my_list.append(np.array([curr_x+3, curr_y+4]))
        # my_list.append(np.array([curr_x+3, curr_y+5]))
        # my_list.append(np.array([curr_x+3, curr_y+6]))
        # my_list.append(np.array([curr_x+3, curr_y+7]))
        # my_list.append(np.array([curr_x+3, curr_y+8]))
        # my_list.append(np.array([curr_x+3, curr_y+9]))
        ### shorter left turn
        # my_list.append(np.array([curr_x, curr_y]))
        # my_list.append(np.array([curr_x+0.8, curr_y]))
        # my_list.append(np.array([curr_x+1.35, curr_y+0.25]))
        # my_list.append(np.array([curr_x+1.6, curr_y+0.8]))
        # my_list.append(np.array([curr_x+1.6, curr_y+1.6]))
        # my_list.append(np.array([curr_x+1.6, curr_y+1.6]))
        # my_list.append(np.array([curr_x+1.6, curr_y+1.6]))
    if (shape=="left_short"):
        my_list.append(np.array([curr_x, curr_y]))
        my_list.append(np.array([curr_x+0.8, curr_y]))
        my_list.append(np.array([curr_x+1, curr_y+0.2]))
        my_list.append(np.array([curr_x+1, curr_y+1]))
        my_list.append(np.array([curr_x+1, curr_y+2]))
        my_list.append(np.array([curr_x+1, curr_y+3]))
        my_list.append(np.array([curr_x+1, curr_y+4]))
        my_list.append(np.array([curr_x+1, curr_y+5]))
        my_list.append(np.array([curr_x+1, curr_y+6]))
        my_list.append(np.array([curr_x+1, curr_y+7]))
        my_list.append(np.array([curr_x+1, curr_y+8]))
        my_list.append(np.array([curr_x+1, curr_y+9]))


    if(shape=="right"):
        my_list.append(np.array([curr_x, curr_y]))
        my_list.append(np.array([curr_x+1, curr_y]))
        my_list.append(np.array([curr_x+1.8, curr_y-0.2]))
        my_list.append(np.array([curr_x+2, curr_y-1]))
        my_list.append(np.array([curr_x+2, curr_y-2]))
        my_list.append(np.array([curr_x+2, curr_y-3]))
        my_list.append(np.array([curr_x+2, curr_y-4]))
        my_list.append(np.array([curr_x+1.8, curr_y-5]))
        my_list.append(np.array([curr_x+1.8, curr_y-6]))
        my_list.append(np.array([curr_x+1.8, curr_y-7]))

    if(shape=="circle_left"):
        my_list.append(np.array([curr_x, curr_y]))
        my_list.append(np.array([curr_x+0.5, curr_y]))
        my_list.append(np.array([curr_x+1, curr_y+0.75]))
        my_list.append(np.array([curr_x+1, curr_y+1.5]))
        my_list.append(np.array([curr_x+0.5, curr_y+2.25]))
        my_list.append(np.array([curr_x, curr_y+2.25]))
        my_list.append(np.array([curr_x-0.5, curr_y+1.5]))
        my_list.append(np.array([curr_x-0.5, curr_y+0.75]))
        my_list.append(np.array([curr_x-0.5, curr_y]))
        my_list.append(np.array([curr_x-0.5, curr_y]))
        my_list.append(np.array([curr_x-0.5, curr_y]))
        my_list.append(np.array([curr_x-0.5, curr_y]))
        my_list.append(np.array([curr_x-0.5, curr_y]))
        my_list.append(np.array([curr_x-0.5, curr_y]))

    if(shape=="zigzag"):
        # my_list.append(np.array([curr_x, curr_y]))
        # my_list.append(np.array([curr_x+0.65, curr_y+0.75]))
        # my_list.append(np.array([curr_x+1, curr_y+1]))
        # my_list.append(np.array([curr_x+1.65, curr_y+0.25]))
        # my_list.append(np.array([curr_x+2, curr_y]))
        # my_list.append(np.array([curr_x+2.65, curr_y+0.75]))
        # my_list.append(np.array([curr_x+3, curr_y+1]))
        # my_list.append(np.array([curr_x+3, curr_y+1]))
        # my_list.append(np.array([curr_x+3, curr_y+1]))

        # my_list.append(np.array([curr_x, curr_y]))
        # my_list.append(np.array([curr_x+1, curr_y]))
        # my_list.append(np.array([curr_x+2, curr_y+1]))
        # my_list.append(np.array([curr_x+3, curr_y]))
        # my_list.append(np.array([curr_x+4, curr_y+1]))
        # my_list.append(np.array([curr_x+5, curr_y]))
        # my_list.append(np.array([curr_x+6, curr_y+1]))
        # my_list.append(np.array([curr_x+7, curr_y]))
        # my_list.append(np.array([curr_x+8, curr_y+1]))
        # my_list.append(np.array([curr_x+9, curr_y]))

        my_list.append(np.array([curr_x, curr_y]))
        my_list.append(np.array([curr_x+1, curr_y+1]))
        my_list.append(np.array([curr_x+2, curr_y]))
        my_list.append(np.array([curr_x+3, curr_y+1]))
        my_list.append(np.array([curr_x+4, curr_y]))
        my_list.append(np.array([curr_x+5, curr_y+1]))
        my_list.append(np.array([curr_x+6, curr_y]))
        my_list.append(np.array([curr_x+7, curr_y+1]))
        my_list.append(np.array([curr_x+8, curr_y]))

    if(shape=="uturn"):
        my_list.append(np.array([curr_x, curr_y]))
        my_list.append(np.array([curr_x+1.4, curr_y]))
        my_list.append(np.array([curr_x+2.4, curr_y]))
        my_list.append(np.array([curr_x+2.9, curr_y+0.35]))
        my_list.append(np.array([curr_x+2.9, curr_y+1.4]))
        my_list.append(np.array([curr_x+2.4, curr_y+1.7]))
        my_list.append(np.array([curr_x+1.4, curr_y+1.7]))
        my_list.append(np.array([curr_x+0.6, curr_y+1.7]))
        my_list.append(np.array([curr_x+0, curr_y+1.7]))
        my_list.append(np.array([curr_x-1, curr_y+1.7]))
        my_list.append(np.array([curr_x-1.5, curr_y+1.7]))
        my_list.append(np.array([curr_x-2, curr_y+1.7]))
        my_list.append(np.array([curr_x-2, curr_y+1.7]))
        my_list.append(np.array([curr_x-2, curr_y+1.7]))
        my_list.append(np.array([curr_x-2, curr_y+1.7]))
        my_list.append(np.array([curr_x-2, curr_y+1.7]))
        
    if(shape=='figure8'):

        #loose fig8
        '''my_list.append(np.array([-1.16, -0.68]))
        my_list.append(np.array([-0.16, -0.92]))
        my_list.append(np.array([0.455, -0.47]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([0.95, 0.84]))
        my_list.append(np.array([1.636, 1.107]))
        my_list.append(np.array([2.603, 0.777]))
        my_list.append(np.array([2.57, -0.33]))
        my_list.append(np.array([2.00, -0.84]))
        my_list.append(np.array([1.087, -0.684]))
        #my_list.append(np.array([0.553, 0.173]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([-0.096, 1.085]))
        my_list.append(np.array([-0.924, 0.935]))
        my_list.append(np.array([-1.397, 0.133]))

        my_list.append(np.array([-1.16, -0.68]))
        my_list.append(np.array([-0.16, -0.92]))
        my_list.append(np.array([0.455, -0.47]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([0.95, 0.84])) '''

        #tighter fig8
        my_list.append(np.array([-0.824, -0.57]))
        my_list.append(np.array([-0.16, -0.8]))
        my_list.append(np.array([0.455, -0.47]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([1.0, 0.73]))
        my_list.append(np.array([1.636, 0.76]))
        my_list.append(np.array([2.203, 0.45]))
        my_list.append(np.array([2.203, -0.25]))
        my_list.append(np.array([1.7, -0.6]))
        my_list.append(np.array([1.087, -0.52]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([0.1, 0.89]))
        my_list.append(np.array([-0.724, 0.735]))
        my_list.append(np.array([-0.997, 0.133]))

        my_list.append(np.array([-0.824, -0.57]))
        my_list.append(np.array([-0.16, -0.8]))
        my_list.append(np.array([0.455, -0.47]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([1.0, 0.73]))
        my_list.append(np.array([1.636, 0.76]))
        my_list.append(np.array([2.203, 0.45]))
        my_list.append(np.array([2.203, -0.25]))
        my_list.append(np.array([1.7, -0.6]))
        my_list.append(np.array([1.087, -0.52]))


        # my_list.append(np.array([curr_x, curr_y]))
        # my_list.append(np.array([curr_x+1.0, curr_y-0.24]))
        # my_list.append(np.array([curr_x+0.615, curr_y+0.45]))
        # my_list.append(np.array([curr_x+0.189, curr_y+0.607]))
        # my_list.append(np.array([curr_x+0.306, curr_y+0.703]))
        # my_list.append(np.array([curr_x+0.686, curr_y+0.267]))
        # my_list.append(np.array([curr_x+1.033, curr_y-0.33]))
        # my_list.append(np.array([curr_x-0.03, curr_y-1.107]))
        # my_list.append(np.array([curr_x-0.57, curr_y-0.51]))
        # my_list.append(np.array([curr_x-1.0, curr_y+0.18]))
        # my_list.append(np.array([curr_x-0.534, curr_y+0.857]))
        # my_list.append(np.array([curr_x-0.457, curr_y+0.912]))
        # my_list.append(np.array([curr_x-0.828, curr_y-0.149]))
        # my_list.append(np.array([curr_x-0.473, curr_y-0.802]))
    if(shape == "circle"):
        my_list.append(np.array([-0.824, -0.57]))
        my_list.append(np.array([-0.16, -0.8]))
        my_list.append(np.array([0.455, -0.47]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([0.1, 0.89]))
        my_list.append(np.array([-0.724, 0.735]))
        my_list.append(np.array([-0.997, 0.133]))

        my_list.append(np.array([-0.824, -0.57]))
        my_list.append(np.array([-0.16, -0.8]))
        my_list.append(np.array([0.455, -0.47]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([0.1, 0.89]))
        my_list.append(np.array([-0.724, 0.735]))
        my_list.append(np.array([-0.997, 0.133]))
    if(shape == "circle_cw"):
        my_list.append(np.array([-0.824, -0.57]))
        my_list.append(np.array([-0.997, 0.133]))
        my_list.append(np.array([-0.724, 0.735]))
        my_list.append(np.array([0.1, 0.89]))
        my_list.append(np.array([0.644, 0.137]))
        my_list.append(np.array([0.455, -0.47]))
        my_list.append(np.array([-0.16, -0.8]))
    if(shape == "snake"):
        my_list.append(np.array([-1.346, -0.30]))
        my_list.append(np.array([-0.94, -0.69]))
        my_list.append(np.array([-0.38, -0.38]))
        my_list.append(np.array([-0.21, 0.019]))
        my_list.append(np.array([-0.05, 0.53]))
        my_list.append(np.array([0.47, 0.81]))
        my_list.append(np.array([0.79, 0.48]))
        my_list.append(np.array([1.045, -0.0935]))
        my_list.append(np.array([1.306, -0.49]))
        my_list.append(np.array([1.683, -0.74]))
        my_list.append(np.array([2.23, -0.497]))
        my_list.append(np.array([2.47, -0.035]))
        my_list.append(np.array([2.47, 1.035]))
        my_list.append(np.array([2.47, 2.035]))
        
    my_list = np.array(my_list)
    my_list = np.array(my_list)
    return my_list

    # my_list.append(np.array([curr_x, curr_y]))
    # my_list.append(np.array([curr_x+1, curr_y+1]))
    # my_list.append(np.array([curr_x+2, curr_y]))
    # my_list.append(np.array([curr_x+3, curr_y+1]))
    # my_list.append(np.array([curr_x+4, curr_y]))
    # my_list.append(np.array([curr_x+4, curr_y]))
    # my_list.append(np.array([curr_x+4, curr_y]))
    # my_list.append(np.array([curr_x+4, curr_y]))
    # my_list.append(np.array([curr_x+4, curr_y]))